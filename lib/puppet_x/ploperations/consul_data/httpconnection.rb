require 'openssl'
require_relative './common'
# rubocop:disable Style/ClassAndModuleChildren
module PuppetX
  module Ploperations
    module ConsulData
      class HTTPConnection
        def initialize(consul_url)
          @uri = PuppetX::Ploperations::ConsulData::Common.parse_consul_url(consul_url)
          use_ssl = @uri.scheme == 'https'
          @connection = Puppet::Network::HttpPool.http_instance(@uri.host, @uri.port, use_ssl)
        end

        def connection
          @connection
        end

        def uri
          @uri
        end
      end

      # @summary Determine and return a set of options to be used by Net::HTTP
      #
      # Determine and return a set of options to be used by Net::HTTP. This
      # is done by first checking the URI for a sentinel value of `127.0.0.1`
      # and then checking to see if a client certificate exists. If the
      # sentinel value exists or there is not a client certificate then no
      # peer verification is done. If a client certificate is present then
      # peer verification is done via that cert and the puppet ca file.
      #
      # @param uri A URI object as generated by `parse_consul_url`
      # @return A hash of options to be passed on to Net::HTTP
      def self.https_options(uri)
        certname = Puppet.settings['certname']
        certdir = Puppet.settings['certdir']
        keydir = Puppet.settings['privatekeydir']

        client_cert_path = File.join(keydir, "#{certname}.pem")

        if uri.hostname.eql? '127.0.0.1'
          {
            use_ssl: true,
            verify_mode: OpenSSL::SSL::VERIFY_NONE,
          }
        elsif File.exist?(client_cert_path)
          client_cert = File.read(client_cert_path)
          client_key = File.read(File.join(keydir, "#{certname}.pem"))

          {
            use_ssl: true,
            verify_mode: OpenSSL::SSL::VERIFY_PEER,
            ca_file: File.join(certdir, 'ca.pem'),
            cert: OpenSSL::X509::Certificate.new(client_cert),
            key: OpenSSL::PKey::RSA.new(client_key),
          }
        else
          {
            use_ssl: true,
            verify_mode: OpenSSL::SSL::VERIFY_NONE,
          }
        end
      end
    end
  end
end
